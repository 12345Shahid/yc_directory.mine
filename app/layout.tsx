import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { css } from "@emotion/css";
import "easymde/dist/easymde.min.css";
import { Toaster } from "@/components/ui/toaster";

const workSans = localFont({
  src: [
    {
      path: ".fonts/workSans-Black.ttf",
      weight: "900",
      style: "normal",
    },
    {
      path: ".fonts/workSans-ExtraBold.ttf",
      weight: "800",
      style: "normal",
    },
    {
      path: ".fonts/workSans-Bold.ttf",
      weight: "700",
      style: "normal",
    },
    {
      path: ".fonts/workSans-SemiBold.ttf",
      weight: "600",
      style: "normal",
    },
    {
      path: ".fonts/workSans-Medium.ttf",
      weight: "500",
      style: "normal",
    },
    {
      path: ".fonts/workSans-Regular.ttf",
      weight: "400",
      style: "normal",
    },
    {
      path: ".fonts/workSans-Black.ttf",
      weight: "900",
      style: "normal",
    },
    {
      path: ".fonts/workSans-Thin.ttf",
      weight: "200",
      style: "normal",
    },
    {
      path: ".fonts/workSans-ExtraLight.ttf",
      weight: "100",
      style: "normal",
    },
  ],
  variable: "--font-work-sans",
});

export const metadata: Metadata = {
  title: "YC",
  description: "Generated by YC",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={workSans.variable}>
        {children}
        <Toaster />
      </body>
    </html>
  );
}
function localFont({
  src,
  variable,
}: {
  src: { path: string; weight: string; style: string }[];
  variable: string;
}) {
  // Generate @font-face rules for each font file
  const fontFaces = src
    .map(
      ({ path, weight, style }) => `
        @font-face {
          font-family: '${variable}';
          src: url('${path}') format('truetype');
          font-weight: ${weight};
          font-style: ${style};
          font-display: swap;
        }
      `
    )
    .join("\n");

  // Inject font-face rules into a style tag
  if (typeof window !== "undefined") {
    const style = document.createElement("style");
    style.innerHTML = fontFaces;
    document.head.appendChild(style);
  }

  // Return an object with the variable name for usage in className
  return {
    variable,
  };
}
